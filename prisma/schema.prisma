// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MembershipType {
  STUDENT
  ORDINARY_II
  ORDINARY_I
  HONORARY
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?  // Keep name in User as it's used for auth/display
  image          String?  // Keep image in User as it's used for auth/display
  isAdmin        Boolean  @default(false)
  isSuperAdmin   Boolean  @default(false)
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  member         Member?

  // Relations
  registrations EventRegistration[]
  newsArticles  News[]              @relation("Author")
  paymentSettings PaymentSettings[] @relation("PaymentSettingsUpdater")
}

model Member {
  id                String         @id @default(cuid())
  userId           String?        @unique  // Optional but must be unique
  user             User?          @relation(fields: [userId], references: [id])
  membershipType   MembershipType
  membershipFee    Decimal?
  transactionDate  DateTime?
  paymentImage     String?        // URL to payment proof image
  dateOfRegistration DateTime     @default(now())
  
  // Personal Information
  salutation       String
  englishName      String
  preferredName    String?
  chineseName      String?
  gender           String
  bio              String?        @db.Text
  
  // Academic Information
  class            Int            // Graduation year
  faculty          String
  major            String
  cusid            String        // College/University Student ID
  studentIdImage   String        // URL to the uploaded student ID image
  
  // Professional Information
  employer         String?
  position         String?
  industry         String?       // Industry they are working in
  
  // Contact Information
  phoneNumber      String
  address          String?

  // Verification Status
  isVerified       Boolean        @default(false)
  verifiedAt       DateTime?
  status           String         @default("PENDING")
  rejectionReason  String?
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  date        DateTime
  location    String
  price       Decimal  @db.Decimal(10, 2)
  capacity    Int?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  registrations EventRegistration[]

  @@index([date])
}

model EventRegistration {
  id           String   @id @default(cuid())
  userId       String
  eventId      String
  status       String   @default("REGISTERED") // REGISTERED, CANCELLED, ATTENDED
  paymentImage String?  // URL to payment proof image
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model News {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // For URL-friendly identifiers
  content     String   @db.Text
  excerpt     String   @db.Text // Short description for previews
  imageUrls   String[]
  publishedAt DateTime @default(now())
  featured    Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User @relation("Author", fields: [authorId], references: [id])

  // Categories or tags could be added here later
  // categories Category[]

  @@index([publishedAt])
  @@index([authorId])
  @@index([featured])
}

model PaymentSettings {
  id              String   @id @default(cuid())
  bankName        String?
  accountName     String?
  accountNumber   String?
  bankCode        String?
  additionalInfo  String?  @db.Text
  lastUpdatedBy   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  updatedByUser   User     @relation("PaymentSettingsUpdater", fields: [lastUpdatedBy], references: [id])

  @@index([lastUpdatedBy])
}
