import { type NextRequest, NextResponse } from "next/server";
import { updateSession } from "@/utils/supabase/middleware";
import { authConfig } from "@/lib/auth-config";
import { isUserAdmin } from "@/lib/auth";

export async function middleware(request: NextRequest) {
  // First, handle Supabase session
  const supabaseResponse = await updateSession(request);

  const pathname = request.nextUrl.pathname;

  // Check if it's an admin route
  const isAdminRoute = authConfig.adminRoutes.some((route) => {
    const pattern = new RegExp(`^${route.replace(/\[.*?\]/g, "[^/]+")}$`);
    return pattern.test(pathname);
  });

  if (isAdminRoute) {
    console.log("\n\nIS ADMIN ROUTE");
    try {
      const isAdmin = await isUserAdmin();

      if (!isAdmin) {
        console.log("\n\nIS NOT ADMIN");
        const redirectUrl = new URL("/", request.url);
        return NextResponse.redirect(redirectUrl);
      }
      console.log("\n\nIS ADMIN");
    } catch (error) {
      const redirectUrl = new URL("/", request.url);
      return NextResponse.redirect(redirectUrl);
    }
  }
  console.log("\n\nIS NOT ADMIN ROUTE");

  return supabaseResponse;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};
